const JSCK = require('jsck');
const fs = require('fs');
const Promise = require('bluebird');
const readFileAsync = Promise.promisify(fs.readFile);
const path = require('path');

const parse = require('co-body');

const config = require('../../config');
const utils = require('../../utils');

const schema = JSON.parse(fs.readFileSync(path.join(__dirname, 'schema.json'), 'utf-8'));
const jsck = new JSCK.draft4(schema);

var views = [];
Promise.each(config.user.engine.views, function (view) {
    return utils.walk(view).then(function (files) {
        files.forEach(function (file) {
            views.push(file);
        });
    });
});

function* GET() {
    if (this.request.accepts('json') && this.request.is('json')) {
        const body = yield parse.json(this.request);
        var validated = jsck.validate(body);
        if (validated.valid) {
            var file = path.join(config.user.root, body.file) + config.engine.extension;
            views = views.length ? views : [file];
            if (~views.indexOf(file)) { // if requested file is in the views folder(s), then continue
                var data = yield readFileAsync(file, 'utf-8');
                data = data.split("\n").map(function (line) {
                    var tags = line.match(/\(\([^]+?\)\)/g);
                    if (tags)
                        return tags[0].replace(/[\(\)]/g, '');
                }).filter(utils.filter.truthy).filter(function (i) { return i[0] != '>' });
                this.body = { anchors: data };
            } else {
                this.status = 403;
                this.body = { "error": "forbidden" };
            }
        } else {
            this.status = 400;
            this.body = { "error": "bad request" };
            console.log("jsck error:", validated);
        }
    } else {
        this.status = 400;
        this.body = { "error": "bad request" };
    }
}


module.exports = {
    get: GET
};
