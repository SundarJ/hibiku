const koa = require('koa');
const serve = require('koa-static');
const app = module.exports = koa();

const path = require('path');
const Promise = require('bluebird');
const utils = require('./utils');

const ee = require('events').EventEmitter;
const event = new ee();

const render = require('./engine');

app._listen = app.listen;
app.listen = function(port, ip) {
    port = port || 8080;
    ip = ip || '';
    event.on('listen', function() {
       console.log('\n  hibiku now listening to', [ip,port].join(':'), '\n');
       app._listen(port, ip); 
    });
};

var template = {
    'index': {
        'main title': 'Yo',
        'main content area': 'peace'
    },
    'hibiku-editor': {
        files: []
    }
};

var viewFiles = [], routes = [];
Promise.each(settings.engine.views, function(view) {
    return utils.walk(view).then(function(files) {
        files.forEach(function(file) {
            file = file.replace(settings.engine.extension, '');
            if (file.indexOf(settings.root) > -1) {
                routes.push(file.replace(settings.root, ''));
            } else {
                viewFiles.push(file.replace(settings.user.root, ''));
                routes.push(file.replace(view, ''));
            }
        });
    });
}).then(function() {
    template['hibiku-editor'].files = viewFiles;
    
    
    var map = Object.create(null);
    routes = routes.forEach(function(ro) {
        var hook = path.basename(ro);
        if (ro.indexOf('/bts/') === 0) {
            ro = ro.replace(/pages\/(hibiku-)?/, '');
        } else {
            var parts = ro.split(path.sep).slice(1);
            if (parts.length > 1) {
                hook = parts.join(path.sep); // hook for folders (ie. path/to/filename instead of just filename)
            }
        }
        
        map[ro] = hook;
    });
    
    map['/'] = settings.user.options.frontPage;
    
    const api = require('./api');
    api.use(app);
    
    app.use(serve(settings.root));
    app.use(serve(settings.user.root));
    
    app.use(function* () {
        var req = map[this.request.url];
        if (req) {
            this.body = yield render(req, template[req]);
        } else {
            this.status = 404;
            this.body = yield render('404', { url: this.request.url });
        }
    });
    
    event.emit('listen');
});
