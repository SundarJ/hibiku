define(function(require) {
    var nest = require('./nest');
    var MediumEditor = require('../lib/editor');
    
    var hb = {
        selectors: {
            form: '.hb-editor-form',
            files: '.hb-files'
        },
        editor: {
            init: function (sel) {
                return new MediumEditor(sel, {
                    disablePlaceholders: true,
                    buttons: ['bold', 'italic', 'underline', 'quote', 'image', 'orderedlist', 'unorderedlist', 'header1', 'header2', 'pre'],
                    buttonLabels: 'fontawesome',
                    autoLink: true
                });
            }
        },
    };
    
    nest.qs(hb.selectors.files).delegate('click', 'li', function(click) {
        nest.request('/bts/api', {
            'content-type': 'application/json; charset=utf-8',
            'accept': 'application/json'
        }).post(JSON.stringify({
            file: click.target.innerHTML
        }), function() {
            var anchors = JSON.parse(this.responseText).anchors;
            var frag = document.createDocumentFragment();
            anchors.forEach(function(anchor) {
                var container = document.createElement('div');
                container.className = 'hb-field-container';
                
                if ((new RegExp(' area$')).test(anchor)) {
                    var field = document.createElement('div');
                    field.className = 'hb-field hb-field-area';
                    hb.editor.init(field);
                } else {
                    var field = document.createElement('input');
                    field.className = 'hb-field hb-field-inline';
                }
                
                field.dataset.anchor = anchor;
                
                container.appendChild(field);
                frag.appendChild(container);
            });
            document.querySelector(hb.selectors.form).appendChild(frag);
        });
    });
});