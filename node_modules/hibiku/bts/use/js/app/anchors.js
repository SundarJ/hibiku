define(function(require) {
    var nest = require('./nest');
    var MediumEditor = require('../lib/editor');
    
    var hb = {
        selectors: {
            form: '.hb-editor-form',
            field: '.hb-field:not(.hb-btn)',
            btn: '.hb-btn',
            files: '.hb-files'
        },
        editor: {
            init: function (sel) {
                return new MediumEditor(sel, {
                    disablePlaceholders: true,
                    buttons: ['bold', 'italic', 'underline', 'quote', 'image', 'orderedlist', 'unorderedlist', 'header1', 'header2', 'pre'],
                    buttonLabels: 'fontawesome',
                    autoLink: true
                });
            }
        },
    };
    
    nest.qs(hb.selectors.form).delegate('click', 'label', function(click) {
       document.getElementById(click.target.htmlFor).focus(); /* fix for medium editor divs, so they can be focused by their label */ 
    });
    
    var pageHiddenField = document.getElementById('page-field');
    
    nest.qs(hb.selectors.files).delegate('click', 'li', function(click) {
        
        if (pageHiddenField.value === click.target.innerHTML)
            return;
        pageHiddenField.value = click.target.innerHTML;
        
        var containers = [].concat(nest.qs('.hb-field-container'));
        containers.forEach(function(container) {
           container.parentNode.removeChild(container); 
        });
        
        nest.request('api', {
            'content-type': 'application/json; charset=utf-8',
            'accept': 'application/json'
        }).post({
            file: click.target.innerHTML
        }, function() {
            var anchors = JSON.parse(this.responseText).anchors;
            var frag = document.createDocumentFragment();
            anchors.forEach(function(anchor) {
                if (document.getElementById(anchor.replace(/ /g, '-')))
                    return;
                var container = document.createElement('div');
                container.className = 'hb-field-container';
                var label = document.createElement('label');
                label.className = 'hb-field-label';
                
                if (/ area$/.test(anchor)) {
                    var field = document.createElement('div');
                    field.className = 'hb-field hb-field-area';
                    hb.editor.init(field);
                } else {
                    var field = document.createElement('input');
                    field.className = 'hb-field hb-field-inline';
                }
                
                field.id = field.name = label.htmlFor = anchor.replace(/ /g, '-');
                label.textContent = anchor.replace(/ area$/, "");
                
                container.appendChild(label);
                container.appendChild(field);
                frag.appendChild(container);
            });
            
            nest.qs(hb.selectors.form).appendChild(frag);
            
        });
        
    });
    
    nest.qs(hb.selectors.form).listen('submit', function(e) {
        
        e.preventDefault();
        
        var values = {
                page: pageHiddenField.value,
                fields: nest.qs(hb.selectors.field).map(function(field) {
                    return {
                        "anchor": field.id.replace(/-/g, " "),
                        "content": field.value || field.innerHTML
                    };
                })
        };
        
        nest.request('api/post', {
            'content-type': 'application/json; charset=utf-8',
            'accept': 'application/json'
        }).post(values, function() {
            console.log(JSON.parse(this.responseText));
        });
        
    });
    
    nest.key().ctrl('s').upon(function() {
        nest.qs(hb.selectors.btn).click(); // can't submit form directly, as submit event isn't called
    });
    
});
