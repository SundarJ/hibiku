Hibiku (ja. vi. 'to resound; to resonate')
	CMS / Templating system written with Koa
	
Hibiku is a developer-friendly CMS/templating system, that is designed to be easy to use, but highly configurable. Within it, you enter content into an Editor screen, which then gets stored in a database so that it can be used in the templates you create. It comes with a custom templating system, which will be described later on, and a router/view engine - built with Koa - that makes it simple to build a website, or a blog.


Configuration

Hibiku is configured simply by adding a "hibiku" key to your package.json's "config" section. All of the options can be overriden (without affecting the module's internal configuration). Shown are the defaults, as well as an explanation of each of the sections.

"config": {

    "hibiku": {
    
        /**
         * root (#) folder <String>
         *     app root
         */
         
         "root": ".",
         
         
        /**
         * #/engine <Object>
         *     settings for the view engine
         * 
         *     .views <Array>
         *         list of folders that hibiku traverses to find files
         * 
         *     .extension <Object>
         *         file extensions for hibiku to consider
         *
         *         .plain <String>
         *             extension to treat as a vanilla html file (ie. do nothing, but make route for it)
         *         .hibiku <String>
         *             extension for files that hibiku will render as templates
         */
          
         "engine": {
          
             "views": [
               "hibiku"
             ],
              
             "extension": {
                 "plain": ".html",
                 "hibiku": ".hb"
             }
          
        },
          
          
        /**
         * #/db <Object>
         *     self-explanatory; settings for the database connection
         */
           
        "db": {
            "host": "localhost",
            "name": "hibiku",
            "user": "",
            "pass": ""
        },
           
           
        /**
         * #/options <Object>
         *     bloggy options
         *
         *     .locale <String>
         *         i18n default locale
         *
         *     .frontPage <String>
         *         name of the page to serve as /
         */
            
        "options": {
            "locale": "en-GB",
            "frontPage": "index"
        },
            
            
        /**
         * #/editor <Object>
         *     settings relating to the Editor
         *
         *     .hidden <Array>
         *         directories to hide from the Editor file list 
         *         for instance, includes folders
         */
             
         "editor": {
            "hidden": [
                "components"
            ]
         }
    }
    
}


Routing

Hibiku's routes work like so:

Internal pages:
Get a /bts route, like /bts/editor for the editor screen

User (external) pages:
Get a / route, like /index for the "index.ext" file under one of the views folders,
or a /path/to/route for nested pages; for example, with a directory structure like so:

/visage
--/fruit
----apple.hb
----kumquat.html
--index.hb

The relevant routes will be:

GET / | GET /index  --> /visage/index.hb
GET /fruit/apple    --> /visage/fruit/apple.hb
GET /fruit/kumquat   --> /visage/fruit/kumquat.html

(untested)
If you wanted to add a POST handler to the /fruit/kumquat route, then you could do the following:

const hibiku = require('hibiku');
const route = require('koa-route');

function* kumquatPost() {
    this.body = 'all the kumquats';
}

hibiku.use(route.post('/fruit/kumquat', kumquatPost));
hibiku.listen(); // default port 8080
(/untested)


Templating

Hibiku uses the Soft templating engine, that can be used for .hb (or whatever the extension is configured to) files. It works like so:

The templating elements are those with a [:verb] attribute, which do different things depending on the verb.

<:import src="some/path">, <:include src="some/path">
    imports the file under some/path into the current file
<:self>, <:this>, <:i>, <:here>
    these are placeholder elements, that indicate where the template's content should be put (in case you want anything before or after)
<:if object|attribute>
    start if statement
<:else>
    start else statement
<:endif>, <:fi>
    end if/else statement

[:is="foo"]
    the content in the template under the "foo" key will be placed into the element with this attribute
[:of="things"]
    this is a for-loop: all of the items in the "things" array will be used to create elements, with inner content being the i-th item
[:as="currency"]
    use the `currency` helper on the content from the template before insertion
[:void]
    do not fill in the element's inner content
[:type="area"]
    render a WYSIWYG textarea on the Editor screen for this element

":self", ":this", ":i", ":here"
    when written in an attribute, will be replaced with the template content


/visage/index.hb
-----------

<:import src="components/header">

    <main>
    
        <header class="main-head">
            <h1 :is="main title"></h1>
            <p :is="main content" :type="area"></p>
        </header>
        
        <ul class="movies">
            <li data-movie=":self" :of="movies">
                <i class="fa fa-ticket"></i>
                <:self>
            </li>
        </ul>
        
        <h2>Authors</h2>
        
        <ul class="authors">
            <li :of="authors"></li>
        </ul>
        
        <:if langs>
        
        <h2>Languages</h2>
        
        <ul class="langs">
            <li class="lang-flag"><img src=":self" :void :of="img/flags/{langs.flag}"></li>
            <li class="lang-name" :of="langs.name, langs.country"></li>
        </ul>
        
        <:fi>
        
    </main>
    
<:import src="components/footer">

with the following template:

{
    "main title": "Main title",
    "movies": [
        "Lord of the Rings: The Return of the King",
        "Sucker Punch",
        "Wreck-It Ralph"
    ],
    "authors": [
        "Pete Broccoli",
        "Mary J. Doppelganger",
        "Donald H. Swansea"
    ],
    "langs": [
        {
            "name": "English",
            "country": "England",
            "flag": "en"
        },
        {
            "name": "Japanese",
            "country": "Japan",
            "flag": "ja"
        }
    ]
}

becomes:

<!doctype html>
<html lang="en-GB">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width; initial-scale=1.0">
    <title>Welcome</title>
    <link rel="stylesheet" href="base.css">
</head>
<body>

    <main>
    
        <header class="main-head">
            <h1>Main title</h1>
        </header>
        
        <ul class="movies">
            <li data-movie="Lord of the Rings: The Return of the King">
                <i class="fa fa-ticket"></i>
                Lord of the Rings: The Return of the King
            </li>
            <li data-movie="Sucker Punch">
                <i class="fa fa-ticket"></i>
                Sucker Punch
            </li>
            <li data-movie="Wreck-It Ralph">
                <i class="fa fa-ticket"></i>
                Wreck-It Ralph
            </li>
        </ul>
        
        <h2>Authors</h2>
        
        <ul class="authors">
            <li>Pete Broccoli</li>
            <li>Mary J. Doppelganger</li>
            <li>Donald H. Swansea</li>
        </ul>
        
        <h2>Languages</h2>
        
        <ul class="langs">
            <li class="lang-flag"><img src="img/flags/en.png"></li>
            <li class="lang-name">English, England</li>
            <li class="lang-flag"><img src="img/flags/ja.png"></li>
            <li class="lang-name">Japanese, Japan</li>
        </ul>
        
    </main>

    <script src="core.js"></script>
    
</body>
</html>


Editing

With the templates in place, you can now fill in the content for that template by going to /bts/editor (unimplemented) and logging  in (/uninmplemented).
You'll see a list of the files on the Editor screen, and clicking on one will pull up all of the template fields in the file (the elements that have a :verb attribute)

For example, with the above template, you'll see a "/visage/index" button on the Editor, which, when clicked, will reveal the editable fields for that file, namely:

"main title"
"main content" (textarea)
"movies" (list)
"authors" (list)
"langs" (list of fields)
    "name"
    "country"
    "flag" (image)
    
Any changes entered into these fields will be saved into the database, and will be reflected when you visit /index
